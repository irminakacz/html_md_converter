[![](/assets/clean_code_72_color.png)](/)# 


[atom/rss feed](/atom.xml)----- [Clean Architecture](/uncle-bob/2011/11/22/Clean-Architecture.html)

# The Dark Path
Over the last few months I’ve dabbled in two new languages. [Swift](https://swift.org/) and [Kotlin](https://kotlinlang.org/). These two languages have a number of similarities. Indeed, the similarities are so stark that I wonder if this isn’t a new trend in our language [churn](http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html). If so, *it is a dark path*.The rules of the language insist that when you use a nullable variable, you *must* first check that variable for `null`. So if `s` is a `String?` then `var l = s.length()` won’t compile. Instead you have to say `var l = s.length() ?: 0` or `var l = if (s!=null) s.length() else 0`.Ask yourself why we are trying to plug defects with language features. The answer ought to be obvious. We are trying to plug these defects because these defects happen too often.Now, ask yourself why these defects happen too often. If your answer is that our languages don’t prevent them, then I strongly suggest that you quit your job and never think about being a programmer again; because defects are *never* the fault of our languages. Defects are the fault of *programmers*. It is *programmers* who create defects – not languages.And so you will declare *all* your classes and *all* your functions `open`. You will *never* use exceptions. And you will get used to using lots and lots of `!` characters to override the `null` checks and allow `NPE`s to rampage through your systems.----Why did the nuclear plant at Chernobyl catch fire, melt down, destroy a small city, and leave a large area uninhabitable? 
